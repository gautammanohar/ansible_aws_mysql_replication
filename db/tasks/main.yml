---
- name: Ensure MySQL Python libraries are installed.
  apt: "name=python-mysqldb state=installed"

- name: Ensure MySQL packages are installed.
  apt: "name={{ item }} state=installed"
  with_items:
    - mysql-common
    - mysql-server
    - mysql-client    


- name: Creating replication user
  mysql_user:
    name="{{ slave_maps[host_location] }}_slave"
    password="slavepass"
    host="%"
    priv=*.*:"REPLICATION SLAVE"
    state=present


- name: Setting mysql root password
  mysql_user:
    name=root
    host={{ item }}
    password="rootpass"
  with_items:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1
    - localhost


- name: generate server-id
  shell:
    hostname -I | sed -e 's/ /\n/' | grep -v '^$' | tail -1 | awk -F. '{print $3 * 256 + $4}'
  changed_when: False
  register: mysql_server_id


- name: Setting master Offset 
  set_fact:
    master_offset: "{{ offset_maps[host_location] }}"


- name: put my.cnf
  template:
    src=my.cnf.j2
    dest=/etc/mysql/my.cnf
    backup=yes
  register: last_result

- name: restart mysql
  service:
    name=mysql
    state=restarted
  when: last_result.changed

- name: Check master replication status.
  mysql_replication: mode=getmaster login_user=root login_password="rootpass"
  register: master_status

- name: Setting master IP 
  set_fact:
    master_ip: "{{ lookup('file', 'db/vars/master_of_' + host_location) }}"


- name: Configure replication on the slave.
  mysql_replication:
    mode: changemaster
    master_host: "{{ master_ip }}"
    master_user: "{{ host_location }}_slave"
    master_password: "slavepass"
    master_log_file: "{{ master_status.File }}"
    master_log_pos: "{{ master_status.Position }}"
    login_user: root
    login_password: "rootpass"
  ignore_errors: True

- name: Start replication.
  mysql_replication: mode=startslave login_user=root login_password="rootpass"
